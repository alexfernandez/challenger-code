const {expect} = require('chai')
const {Challenge} = require('../../lib/model/challenge.js')


const data = {
	id: 'test',
	category: 'test',
	difficulty: 'test',
	name: 'Test',
	description: 'Return 0 always',
	implementation: 'function solve() {return 0}',
	verifications: [{
		public: true,
		name: 'Empty',
		input: [],
		output: 0,
	}, {
		public: false,
		name: 'Array with many elements',
		input: [[1,2,3,4,5]],
		output: 0,
	}, {
		public: false,
		name: 'Autogenerated',
		input: ['array', 'number'],
		array: 'function generate() {const array = []; for (let i = 0; i < 1000; i++) array.push(i); return array}',
		number: 'function generate() {return Math.floor(Math.random() * 1000)}',
		output: 0,
	}],
	maxMinutes: 5,
	runningTimeoutSeconds: 1,
}

describe('Challenge model tests', function() {
	this.timeout(5000)
	let challenge = null
	it('should create challenge', async() => {
		challenge = await createChallenge()
		expect(challenge.id).to.equal('test')
		expect(challenge).to.have.property('verifications')
		expect(challenge.verifications.length).to.equal(3)
		const last = challenge.verifications[2]
		expect(last).to.have.property('input')
		expect(last.input.length).to.equal(2)
		const array = last.input[0]
		expect(array.length).to.equal(1000)
		for (let i = 0; i < array.length; i++) {
			expect(array[i]).to.equal(i)
		}
		const number = last.input[1]
		expect(number).to.be.above(0)
		expect(number).to.be.below(1000)
	})
})

async function createChallenge() {
	const challenge = new Challenge(data)
	await challenge.init()
	return challenge
}

module.exports = {createChallenge}

